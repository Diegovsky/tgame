#include "dbus/dbus-protocol.h"
#include <dbus/dbus.h>
#include <stdbool.h>
#include <malloc.h>
#include <string.h>

/* DBusError dbus_error;
DBusConnection * dbus_conn = NULL;
const char * dbus_result = NULL;

static bool _init_dbus() {
    if(dbus_conn == NULL)
    {
        dbus_error_init(&dbus_error);
        if((dbus_conn = dbus_bus_get(DBUS_BUS_SYSTEM, &dbus_error)) == NULL)
        {
            return false;
        }
    }
    return true;
}

#define init_dbus() if(!_init_dbus()) return NULL
#define catch(expr) if((expr) == NULL)

char* openfile_dialog(const char* path)
{
    init_dbus();
    DBusMessage * openfile_msg = NULL;
    DBusMessage * dbus_reply = NULL;
    openfile_msg = dbus_message_new_method_call("org.freedesktop.DBus", "org.freedesktop.portal.FileChooser", "/org/freedesktop/portal/desktop", "OpenFile");
    catch(openfile_msg)
    {
        dbus_connection_unref(dbus_conn);
        return NULL;
    }
    dbus_reply = dbus_connection_send_with_reply_and_block(dbus_conn, openfile_msg, 500, &dbus_error);
    catch(dbus_reply)
    {
        dbus_message_unref(openfile_msg);
        dbus_connection_unref(dbus_conn);
        return NULL;
    }
    if(!dbus_message_get_args(dbus_reply, &dbus_error, DBUS_TYPE_OBJECT_PATH, &dbus_result, DBUS_TYPE_INVALID))
    {
        dbus_message_unref(dbus_reply);
        dbus_message_unref(openfile_msg);
        dbus_connection_unref(dbus_conn);
        return NULL;
    }
    static const char match_fmt[] = "type='signal',interface='org.freedesktop.portal.Request',path='%s'";
    const size_t size = sizeof(match_fmt) + strlen(dbus_result) + 1;
    char* buf = calloc(1, size);
    if(snprintf(buf, size, match_fmt, dbus_result))
    {
        dbus_message_unref(dbus_reply);
        dbus_message_unref(openfile_msg);
        dbus_connection_unref(dbus_conn);
        fprintf(stderr, "Buffer too tiny\n");
        return NULL;
    }
    dbus_bus_add_match(dbus_conn, buf, &dbus_error);
    if(dbus_error_is_set(&dbus_error))
    {
        dbus_message_unref(dbus_reply);
        dbus_message_unref(openfile_msg);
        dbus_connection_unref(dbus_conn);
        return NULL;
    }
    dbus_connection_flush(dbus_conn);
    DBusMessage *signal_response;
    while(true)
        {
        dbus_connection_read_write_dispatch(dbus_conn, 500);
        signal_response = dbus_connection_pop_message(dbus_conn);
        catch(signal_response)
        {
            continue;
        }
            if(dbus_message_is_signal(signal_response, "org.freedesktop.portal.Request", "Response")) {
                DBusMessageIter it;
                if(dbus_message_iter_init(signal_response, &it)) {
                    dbus_message_iter_next(&it);
                    if(dbus_type_is_fixed(dbus_message_iter_get_arg_type(&it))) {
                        dbus_message_iter_get_basic(DBusMessageIter *iter, void *value)
                    }
                }
            }
    }
}
 */

